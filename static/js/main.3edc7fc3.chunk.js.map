{"version":3,"sources":["Components/Appbar.js","Components/Welcome.js","Components/Products/ProductCard.js","Components/Products/Products.js","Components/Buyers/BuyerHome.js","Components/Sellers/SellerHome.js","Components/Home.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","props","classes","AppBar","position","Toolbar","Typography","className","Name","Welcome","handleChange","event","setState","customerType","target","value","state","loginError","redirect","res","postdata","firstname","profileObj","givenName","lastname","familyName","email","sessionStorage","setItem","JSON","stringify","this","fetch","proxyurl","method","headers","body","then","json","console","log","getItem","to","responseGoogle","response","signup","Appbar","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","FormControlLabel","control","Radio","label","clientId","buttonText","onSuccess","onFailure","Component","CoffeCard","name","sellername","specification","type","price","Card","CardHeader","title","subheader","CardContent","variant","CardActions","Button","size","Content","Grid","container","spacing","products","map","ProductCardObj","item","xs","sm","ProductCard","getProductCard","BuyerHome","Products","SellerHome","newProduct","parse","userdata","inputHandler","onInput","placeholder","Number","onClick","Home","Product","Seach","inputHanlder","search","which","user","re","re1","onKeyUp","direction","Routes","exact","path","process","App","appName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3edc7fc3.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport AcUnitRoundedIcon from \"@material-ui/icons/AcUnitRounded\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles(() => ({\n  typographyStyles: {\n    flex: 1\n  }\n}));\n\nconst Header = (props) => {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography className={classes.typographyStyles}>\n          {props.Name}\n        </Typography>\n        <AcUnitRoundedIcon />\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;","import React,{Component} from 'react';\nimport GoogleLogin from 'react-google-login';\nimport {Redirect} from 'react-router-dom';\nimport Appbar from './Appbar'\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nclass Welcome extends Component {\n  constructor(props) {\n    super(props);\n       this.state = {\n       loginError: false,\n       redirect: false,\n       customerType:''\n       }}\n  \n    signup(res){\n        let postdata;\n        if(res){\n        postdata ={\n            firstname: res.profileObj.givenName,\n            lastname: res.profileObj.familyName,\n            email:res.profileObj.email          \n        }\n        \n    }\n    \n\nif(postdata){\n    sessionStorage.setItem(\"userdata\",JSON.stringify(postdata));\n    sessionStorage.setItem(\"type\",this.state.customerType);\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"http://ec2-13-232-150-155.ap-south-1.compute.amazonaws.com:9000/\";\n    fetch(proxyurl+url+this.state.customerType+\"/login\",{\n    method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, /',\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify(postdata) \n    }).then(res=>res.json())\n      .then(res => {\n        console.log(res)\n        this.setState({redirect:true})\n      });\n//updating gui\n    \n}\n}\n  \n\nhandleChange=(event)=>{\n  this.setState({customerType:event.target.value});\n}\n  render(){\n\n    if (this.state.redirect || sessionStorage.getItem('userdata')) {\n      return (<Redirect to={'/home'}/>)\n  }\n\n    const responseGoogle = (response) => {\n      console.log(\"google console\");\n      console.log(response);\n      this.signup(response)\n  }\n  \n  return (\n    <div>\n\n<Appbar />\n\n<FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Customer Wants to Log in</FormLabel>\n          <RadioGroup\n            aria-label=\"Customer Wants to Log in as\"\n            value={this.state.value}\n            onChange={(event)=>this.handleChange(event)}>\n\n            <FormControlLabel value=\"buyers\" control={<Radio />} label=\"Buyer\" />\n            <FormControlLabel value=\"sellers\" control={<Radio />} label=\"Seller\" />\n          </RadioGroup>\n        </FormControl>\n      <br></br>\n\n      <GoogleLogin\n      clientId=\"502757580834-9evok99ilo57je9mo6hciqpprf35thqa.apps.googleusercontent.com\"\n      buttonText=\"Login with Google\"\n      onSuccess={responseGoogle}\n      onFailure={responseGoogle}\n      />\n      </div>\n  );\n}\n}\n\nexport default Welcome;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nconst CoffeCard = props => {\n    const {name, sellername, specification, type,price } = props;\n    return (\n      <Card>\n        <CardHeader\n          title={name}\n          subheader={sellername}\n        />\n         <CardContent>\n          <Typography variant=\"body2\" component=\"p\">\n            {specification}\n          </Typography>\n\n        </CardContent>\n        <CardActions>\n\n          <Typography variant=\"body3\" component=\"p\">\n            {type}\n          </Typography>\n          <Typography variant=\"body3\" component=\"p\">\n            {price}\n          </Typography>\n         \n          <Button size=\"small\">BUY NOW</Button>\n        </CardActions>\n      </Card>\n    );\n  };\n  \n  export default CoffeCard;","import React from \"react\";\nimport ProductCard from \"./ProductCard\";\nimport { Grid } from \"@material-ui/core\";\n\nconst Content = (props) => {\n  const getProductCard = ProductCardObj => {\n    return (\n      <Grid item xs={12} sm={4}>\n        <ProductCard {...ProductCardObj} />\n      </Grid>\n    );\n  };\n\n      \n\n  return (\n    <Grid container spacing={2}>\n      {props.products.map(ProductCardObj => getProductCard(ProductCardObj))}\n    </Grid>\n  );\n};\n\nexport default Content;","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Products from '../Products/Products';\n\nconst BuyerHome = (props)=>{\n    return(\n        <div>\n      <Grid item container>\n    <Grid item xs={false} sm={2} />\n    <Grid item xs={12} sm={8}>\n      <Products products={props.products} />\n    </Grid>\n    <Grid item xs={false} sm={2} />\n    </Grid>\n    </div>\n\n    )\n\n}\n\nexport default BuyerHome;","import React from 'react'\n\nconst SellerHome = (props)=>{\n\n    const newProduct =\n        {\n             sellername:JSON.parse(sessionStorage.userdata).email\n        };\n    \n   const inputHandler=(event)=>{\n       newProduct[event.target.name] = event.target.value;\n    }\n\n   const onSubmtiHandler=()=>{\n       console.log(JSON.stringify(newProduct));\n\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"http://ec2-13-232-150-155.ap-south-1.compute.amazonaws.com:9000/\";\n    fetch(proxyurl+url+\"/products\",{\n    method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, /',\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify(newProduct) \n    }).then(res=>res.json())\n      .then(res => {\n        console.log(res)\n       // this.setState({redirect:true})\n      });\n    }\n    \n    return(\n    <div>\n        <h1>Seller Home Page</h1>\n        <h1> Product Name : <input type=\"text\" name={\"name\"}  onInput={(event)=>inputHandler(event)}/></h1>\n        <h1> Type : <input type=\"text\" placeholder=\"Product or Service\" name=\"type\"  onChange={(event)=>inputHandler(event)} /></h1>\n        <h1> Descirption  : <input type=\"text\" name=\"specification\"   onChange={(event)=>inputHandler(event)} /></h1>\n        <h1> Price/Rate : <input type={Number} name=\"price\"   onChange={(event)=>inputHandler(event)} /> </h1>\n        <button onClick={onSubmtiHandler}> Submit</button>\n        \n    </div>\n\n\n\n\n    \n    )\n}\n\nexport default SellerHome;","import React, { Component } from 'react';\nimport Appbar from './Appbar';\nimport Grid from '@material-ui/core/Grid';\nimport BuyerHome from './Buyers/BuyerHome';\nimport SellerHome from './Sellers/SellerHome';\n\n\n\nclass Home extends Component {\n\n    state=({\n        Product:[],\n        Seach:'',\n        type:''\n    })\n\n\n    inputHanlder=(event)=>{\n        const search = event.target.value;\n        var enterkey = 13\n        this.setState({Seach:search});\n        const type = {name:this.state.Seach};\n       \n        \n        if(event.which===enterkey){\n            //console.log(JSON.stringify(type))\n\n           const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n            const url = \"http://ec2-13-232-150-155.ap-south-1.compute.amazonaws.com:9000/\";\n            fetch(proxyurl+url+\"products\",{\n            method: 'put',\n              headers: {\n                'Accept': 'application/json, text/plain, /',\n                'Content-Type': 'application/json'\n              },\n              body:JSON.stringify(type)\n            }).then(res=>res.json())\n              .then(res => {\n        \n                //console.log(res)\n              //  products=res;\n              //  console.log(products)\n              this.setState({Product:res});\n              });\n\n        }\n    }\n\n\n    \ncomponentDidMount(){\n   const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"http://ec2-13-232-150-155.ap-south-1.compute.amazonaws.com:9000/\";\n    fetch(proxyurl+url+\"products\",{\n    method: 'get',\n      headers: {\n        'Accept': 'application/json, text/plain, /',\n        'Content-Type': 'application/json'\n      }\n    }).then(res=>res.json())\n      .then(res => {\n\n        //console.log(res)\n      //  products=res;\n      //  console.log(products)\n      this.setState({Product:res});\n      });\n\n}\n\nrender() {\n    const user = JSON.parse(sessionStorage.userdata);\n    const type = sessionStorage.type;\n    let re=null;\n    let re1=null;\n    if(type==='buyers'){\n        re=(<BuyerHome products={this.state.Product}/>)\n        re1=(   <Grid>\n            <h1> Search for product </h1>\n        <input type=\"text\" onKeyUp={(event)=>this.inputHanlder(event)} onChange={(event)=>this.inputHanlder(event)} />\n\n       \n        </Grid>)\n    }else if(type==='sellers'){\n        re=(<SellerHome />)\n    }\n\n //const name = sessionStorage.getItem(\"userdata\")\nreturn (\n    \n  <Grid container direction=\"column\">\n  <Grid item>\n   <Appbar Name={user.firstname} />\n     <br></br>\n    </Grid>\n    {re1}\n  {re}  \n</Grid>\n);\n}\n}\nexport default Home;","import React from 'react';\nimport {HashRouter,BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Welcome from './Components/Welcome';\nimport Home from './Components/Home';\n\n\nconst Routes = () => (\n<BrowserRouter >\n    <Switch>\n    <Route exact path={process.env.PUBLIC_URL +\"/\"} component={Welcome}/>\n    <Route path={process.env.PUBLIC_URL +\"/home\"} component={Home}/>  \n   </Switch>\n</BrowserRouter>\n);\nexport default Routes;","import React, { Component } from 'react';\nimport Routes from './Routes';\n\n\nclass App extends Component {\n\nconstructor(){\nsuper();\n    this.state={\n    appName: \"Login with Facebook and Google using ReactJS and RESTful APIs\",\n}\n}\n\nrender() {\nreturn (\n<div>\n<Routes/>\n</div>\n);\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}